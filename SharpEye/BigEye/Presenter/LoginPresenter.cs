using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using View.Interfaces; using Contract; using Presenter.Interfaces; using System.ComponentModel.Composition; using System.ComponentModel.Composition.Hosting; using System.Windows.Forms;  namespace Presenter {     /// <summary>     ///  Презентер авторизации.      ///  Управляет контролом авторизации и объектом соединения.     /// </summary>     public class LoginPresenter : ILoginPresenter     {         private ILoginView _view;         [Import(typeof(ILoginModel))]         public ILoginModel _loginModel;         public event Action Connected;          public LoginPresenter(ILoginView view)         {             ComposContainer.Instance().Compose(this);             if (view != null)             {                 this._view = view;                 _view.Login += Login;                 _loginModel.Done += Done;             }             else             {                 throw new Exception("Null point");             }                      }           private void Login()         {             if (_view.Server != null)             {                 _view.StartProgress();                 Connect();             }                          }           private void Done()         {             _view.StopProgress();             switch(_loginModel.Status)             {                 case Contract.ConnectStatus.Ok:                     ((UserControl) _view.GetView()).Invoke((Action) delegate                     {                         Connected();
                    });                     break;                 case Contract.ConnectStatus.ServerNotFound:                     _view.ShowConError("Неправильное имя сервера");                     break;                 case Contract.ConnectStatus.IncorrectPassOrLogin:                     _view.ShowConError("Неправильный логин или пароль");                     break;                 default:                     _view.ShowConError("Неизвестная ошибка при подключении");                     break;             }         }          public async void Connect()         {             try             {                await Task.Run(() =>                {                    _loginModel.Connect(_view.Server, _view.UserName, _view.Password);
               });             }             catch(Exception undefined)             {
                _view.StopProgress();
                _view.ShowConError(undefined.Message);             }         }          public ILoginView GetView()         {             return this._view;         }     } } 